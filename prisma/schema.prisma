generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum RideType {
  LOCAL
  OUTSTATION
}

enum OutstationTripType {
  ONE_WAY
  ROUND_TRIP
}


enum UserType {
  USER
  DRIVER
  VENDOR
  ADMIN
}

enum RideStatus {
  SEARCHING
  ACCEPTED
  DRIVER_ARRIVED
  RIDE_STARTED
  PAYMENT_PENDING
  PAYMENT_COMPLETED
  PAYMENT_FAILED
  RIDE_ENDED
  CANCELLED
}

enum PaymentMode {
  CASH
  RAZORPAY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TransactionType {
  RIDE_PAYMENT
  WALLET_TOPUP
  WITHDRAWAL
  REFUND
}

// New enums for long distance services
enum LongDistanceServiceType {
  OUTSTATION
  HILL_STATION
  ALL_INDIA_TOUR
  CHARDHAM_YATRA
}

enum LongDistanceBookingStatus {
  PENDING
  DRIVER_ACCEPTED
  ADVANCE_PAID
  DRIVER_PICKUP_STARTED
  DRIVER_ARRIVED
  STARTED
  PAYMENT_PENDING
  COMPLETED
  CANCELLED
}

model User {
  id            String          @id @default(uuid())
  phone         String          @unique
  email         String?         @unique

  name          String?
  userType      UserType
  verified      Boolean         @default(false)
  state         String?
  city          String?
  selfieUrl     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  userDetails    UserDetails?
  driverDetails DriverDetails?
  vendorDetails VendorDetails?
  wallet        Wallet?
  ridesAsUser   Ride[]         @relation("UserRides")
  ridesAsDriver Ride[]         @relation("DriverRides")
  driverStatus  DriverStatus?
  
  // Payment Relations
  sentTransactions     Transaction[] @relation("SenderTransactions")
  receivedTransactions Transaction[] @relation("ReceiverTransactions")
  razorpayCustomerId   String?

  // Long Distance Bookings
  longDistanceBookingsAsUser    LongDistanceBooking[] @relation("UserLongDistanceBookings")
  longDistanceBookingsAsDriver  LongDistanceBooking[] @relation("DriverLongDistanceBookings")
  sentLongDistanceTransactions     LongDistanceTransaction[] @relation("SenderLongDistanceTransactions")
  receivedLongDistanceTransactions LongDistanceTransaction[] @relation("ReceiverLongDistanceTransactions")
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String   @unique
  balance   Float    @default(0)
  currency  String   @default("INR")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id               String            @id @default(uuid())
  amount           Float
  currency         String            @default("INR")
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  senderId        String?
  receiverId      String?
  rideId          String?
  razorpayOrderId String?     @unique
  razorpayPaymentId String?

  description     String?
  metadata        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  sender    User?  @relation("SenderTransactions", fields: [senderId], references: [id])
  receiver  User?  @relation("ReceiverTransactions", fields: [receiverId], references: [id])
  ride      Ride?  @relation(fields: [rideId], references: [id])
}

model Ride {
  id             String         @id @default(uuid())
  userId         String
  driverId       String?
  status         RideStatus
  pickupLocation String
  dropLocation   String
  pickupDistance Float?        // Distance from driver to pickup point
  pickupDuration Int?         // Duration from driver to pickup point in minutes
  fare           Float?
  distance       Float?
  duration       Int?
  tax            Float?
  carCategory    String?
  otp            String?
  totalAmount    Float?
  waitStartTime    DateTime?
  extraCharges     Float     @default(0)
  paymentMode    PaymentMode    @default(CASH)
  paymentStatus  TransactionStatus @default(PENDING)
  razorpayOrderId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  rideType        RideType        @default(LOCAL)
  outstationType  OutstationTripType?
  isDriverAccepted Boolean        @default(false)
  driverAcceptedAt DateTime?
  requestExpiresAt DateTime?

  user         User          @relation("UserRides", fields: [userId], references: [id])
  driver       User?         @relation("DriverRides", fields: [driverId], references: [id])
  transactions Transaction[]
}

// Existing models remain unchanged
model UserDetails {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model DriverDetails {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  aadharNumber    String?
  panNumber       String?
  dlNumber        String?
  vehicleNumber   String?
  vehicleName     String?
  vehicleCategory String?
  dlUrl           String?
  permitUrls      String[]
  carFrontUrl     String?
  carBackUrl      String?
  carLeftUrl      String?
  carRightUrl     String?
  carInteriorUrl  String?
  carCategory     String?
}
model VendorDetails {
  id             String  @id @default(uuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id])
  businessName   String?
  aadharNumber   String?
  panNumber      String?
  aadharFrontUrl String?
  aadharBackUrl  String?
  panUrl         String?
}

model OTP {
  id        String   @id @default(uuid())
  phone     String
  code      String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model DriverStatus {
  id          String   @id @default(uuid())
  driverId    String   @unique
  isOnline    Boolean  @default(false)
  locationLat Float?
  locationLng Float?
  socketId    String?
  lastLocationUpdate DateTime?
  heading           Float?
  speed            Float?
  updatedAt   DateTime @updatedAt
  driver      User     @relation(fields: [driverId], references: [id])
}

// New model for long distance bookings
model LongDistanceBooking {
  id              String                  @id @default(uuid())
  userId          String
  driverId        String?
  serviceType     LongDistanceServiceType
  pickupLocation      String
  pickupLat          Float?
  pickupLng          Float?
  dropLocation       String?
  dropLat            Float?
  dropLng            Float?
  vehicleCategory String
  distance        Float?        // Total trip distance in kilometers
  duration        Int?   
  startDate       DateTime
  endDate         DateTime
  pickupTime      String
  totalDays       Int
  
  // Distance and duration from driver to pickup
  pickupDistance  Float?
  pickupDuration  Int?         // in minutes
  
  // Payment related
  baseAmount      Float
  taxAmount       Float
  totalAmount     Float
  advanceAmount   Float        // 25% of total
  remainingAmount Float        // 75% of total
  
  // Payment tracking
  advancePaymentId      String?
  finalPaymentId        String?
  finalPaymentMode      PaymentMode? @default(CASH)
  advancePaymentStatus  TransactionStatus @default(PENDING)
  finalPaymentStatus    TransactionStatus @default(PENDING)
  
  status          LongDistanceBookingStatus @default(PENDING)
  otp             String?
  
  // For outstation specific
  tripType        OutstationTripType?
  paymentMode      PaymentMode    @default(CASH) 
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  driverAcceptedAt  DateTime?
  advancePaidAt     DateTime?
  driverArrivedAt   DateTime?
  rideStartedAt     DateTime?
  rideEndedAt       DateTime?
  
  // Relations
  user            User          @relation("UserLongDistanceBookings", fields: [userId], references: [id])
  driver          User?         @relation("DriverLongDistanceBookings", fields: [driverId], references: [id])
  transactions    LongDistanceTransaction[]
  
  // Metadata
  notes           String?
  cancelReason    String?
  metadata        Json?
}

// New transaction model for long distance bookings
model LongDistanceTransaction {
  id                String            @id @default(uuid())
  bookingId         String
  amount            Float
  currency          String            @default("INR")
  type             LongDistanceTransactionType
  status           TransactionStatus  @default(PENDING)
  senderId         String?
  receiverId       String?
  razorpayOrderId  String?           @unique
  razorpayPaymentId String?
  
  description      String?
  metadata         Json?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  booking          LongDistanceBooking @relation(fields: [bookingId], references: [id])
  sender           User?       @relation("SenderLongDistanceTransactions", fields: [senderId], references: [id])
  receiver         User?       @relation("ReceiverLongDistanceTransactions", fields: [receiverId], references: [id])
}

enum LongDistanceTransactionType {
  BOOKING_ADVANCE
  BOOKING_FINAL
  REFUND
}