generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RideType {
  LOCAL
  OUTSTATION
  CAR_RENTAL
}

enum OutstationTripType {
  ONE_WAY
  ROUND_TRIP
}


enum UserType {
  USER
  DRIVER
  VENDOR
  ADMIN
}

enum RideStatus {
  SEARCHING
  ACCEPTED
  DRIVER_ARRIVED
  RIDE_STARTED
  PAYMENT_PENDING
  PAYMENT_COMPLETED
  PAYMENT_FAILED
  RIDE_ENDED
  CANCELLED
}

enum PaymentMode {
  CASH
  RAZORPAY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TransactionType {
  RIDE_PAYMENT
  WALLET_TOPUP
  WITHDRAWAL
  REFUND
  DRIVER_REGISTRATION_FEE
  RENTAL_PAYMENT
  RENTAL_CANCELLATION
}

// New enums for long distance services
enum LongDistanceServiceType {
  OUTSTATION
  HILL_STATION
  CHARDHAM_YATRA
  ALL_INDIA_TOUR
}

enum LongDistanceBookingStatus {
  PENDING
  DRIVER_ACCEPTED
  ADVANCE_PAID
  DRIVER_PICKUP_STARTED
  DRIVER_ARRIVED
  STARTED
  PAYMENT_PENDING
  COMPLETED
  CANCELLED
}

// Add this new enum for who cancelled the ride
enum CancelledBy {
  USER
  DRIVER
  SYSTEM
}

model User {
  id            String          @id @default(uuid())
  phone         String          @unique
  email         String?         @unique

  name          String?
  userType      UserType
  verified      Boolean         @default(false)
  state         String?
  city          String?
  selfieUrl     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  userDetails    UserDetails?
  driverDetails DriverDetails?
  vendorDetails VendorDetails?
  wallet        Wallet?
  ridesAsUser   Ride[]         @relation("UserRides")
  ridesAsDriver Ride[]         @relation("DriverRides")
  driverStatus  DriverStatus?

  // Payment Relations
  sentTransactions     Transaction[] @relation("SenderTransactions")
  receivedTransactions Transaction[] @relation("ReceiverTransactions")
  razorpayCustomerId   String?

  // Long Distance Bookings
  longDistanceBookingsAsUser    LongDistanceBooking[] @relation("UserLongDistanceBookings")
  longDistanceBookingsAsDriver  LongDistanceBooking[] @relation("DriverLongDistanceBookings")
  sentLongDistanceTransactions     LongDistanceTransaction[] @relation("SenderLongDistanceTransactions")
  receivedLongDistanceTransactions LongDistanceTransaction[] @relation("ReceiverLongDistanceTransactions")

  // Vendor Bookings
  vendorBookings          VendorBooking[] @relation("VendorBookings")
  driverVendorBookings    VendorBooking[] @relation("DriverVendorBookings")
  sentVendorTransactions     VendorBookingTransaction[] @relation("SentVendorTransactions")
  receivedVendorTransactions VendorBookingTransaction[] @relation("ReceivedVendorTransactions")

  // Chat Messages
  sentMessages ChatMessage[] @relation("SentMessages")
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String   @unique
  balance   Float    @default(0)
  currency  String   @default("INR")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id               String            @id @default(uuid())
  amount           Float
  currency         String            @default("INR")
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  senderId        String?
  receiverId      String?
  rideId          String?
  razorpayOrderId String?     @unique
  razorpayPaymentId String?

  description     String?
  metadata        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  sender    User?  @relation("SenderTransactions", fields: [senderId], references: [id])
  receiver  User?  @relation("ReceiverTransactions", fields: [receiverId], references: [id])
  ride      Ride?  @relation(fields: [rideId], references: [id])
}

model Ride {
  id             String         @id @default(uuid())
  userId         String
  driverId       String?
  status         RideStatus
  pickupLocation String
  dropLocation   String
  pickupDistance Float?        // Distance from driver to pickup point
  pickupDuration Int?         // Duration from driver to pickup point in minutes
  dropLat        Float?        // New field: drop latitude
  dropLng        Float?        // New field: drop longitude
  fare           Float?
  distance       Float?
  duration       Int?
  tax            Float?
  carCategory    String?
  otp            String?
  totalAmount    Float?
  waitStartTime    DateTime?
  extraCharges     Float     @default(0)
  paymentMode    PaymentMode    @default(CASH)
  paymentStatus  TransactionStatus @default(PENDING)
  razorpayOrderId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  rideType        RideType        @default(LOCAL)
  outstationType  OutstationTripType?
  isDriverAccepted Boolean        @default(false)
  driverAcceptedAt DateTime?
  requestExpiresAt DateTime?
  cancellationReason String?      // Add cancellation reason
  cancellationFee   Float?        // Add cancellation fee
  cancelledBy       CancelledBy?

  user         User          @relation("UserRides", fields: [userId], references: [id])
  driver       User?         @relation("DriverRides", fields: [driverId], references: [id])
  transactions Transaction[]

  // Chat Messages
  chatMessages ChatMessage[]

  // New fields for car rental
   metadata          Json?
  isCarRental        Boolean        @default(false)
  rentalPackageHours Int?          // 1-8 hours package
  rentalPackageKms   Float?        // Package kilometers
  rentalBasePrice    Float?        // Base package price
  actualKmsTravelled Float?        // Actual distance traveled
  actualMinutes      Int?          // Actual minutes used
  extraKmCharges     Float?        // Charges for extra kms
  extraMinuteCharges Float?        // Charges for extra minutes

  // Timestamps for rental
  rideStartedAt     DateTime?     // When ride actually starts (after OTP)
  rideEndedAt       DateTime?     // When ride ends



  // Location tracking
  currentLat        Float?        // Current latitude of driver
  currentLng        Float?        // Current longitude of driver
  lastLocationUpdate DateTime?    // Last time location was updated



  otpVerified      Boolean          @default(false)

  // Driver assignment
  driverAssignedAt DateTime?        // When driver was assigned
  driverArrivedAt  DateTime?        // When driver marked arrival

  // Extra fields for better tracking
  estimatedStartKms Float?          // Initial odometer reading
  estimatedEndKms   Float?          // Final odometer reading

  // Car Rental specific fields
  startOdometer      Float?    // Initial odometer reading
  endOdometer        Float?    // Final odometer reading

  // Tracking fields

  locationLogs       RideLocationLog[]

  // Add new location fields
  pickupLat        Float?
  pickupLng        Float?
  pickupAddress    String?   // Store formatted address

  // New fields for carrier option
  carrierRequested Boolean @default(false)
  carrierCharge    Float   @default(0)
}

// Existing models remain unchanged
model UserDetails {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model DriverDetails {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  aadharNumber    String?
  panNumber       String?
  dlNumber        String?
  vehicleNumber   String?
  vehicleName     String?
  vehicleCategory String?
  dlUrl           String?
  permitUrls      String[]
  carFrontUrl     String?
  carBackUrl      String?
  hasCarrier      Boolean  @default(false) // New field for carrier option


  rcUrl           String?
  fitnessUrl      String?
  pollutionUrl    String?
  insuranceUrl    String?


  carCategory     String?
  registrationFeePaid Boolean @default(false)
}
model VendorDetails {
  id             String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  businessName   String?
  address        String?
  experience     String?
  gstNumber      String?
  aadharNumber   String?
  panNumber      String?
  aadharFrontUrl String?
  aadharBackUrl  String?
  panUrl         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model OTP {
  id        String   @id @default(uuid())
  phone     String
  code      String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model DriverStatus {
  id          String   @id @default(uuid())
  driverId    String   @unique
  isOnline    Boolean  @default(false)
  locationLat Float?
  locationLng Float?
  socketId    String?
  lastLocationUpdate DateTime?
  heading           Float?
  speed            Float?
  updatedAt   DateTime @updatedAt
  driver      User     @relation(fields: [driverId], references: [id])
}

// New model for long distance bookings
model LongDistanceBooking {
  id              String                  @id @default(uuid())
  userId          String
  driverId        String?
  serviceType     LongDistanceServiceType
  pickupLocation      String
  pickupLat          Float?
  pickupLng          Float?
  dropLocation       String?
  dropLat            Float?
  dropLng            Float?
  vehicleCategory String
  distance        Float?        // Total trip distance in kilometers
  duration        Int?
  startDate       DateTime
  endDate         DateTime
  pickupTime      String
  totalDays       Int
  selectedDhams   String[]      // Array to store selected dham names

  // Distance and duration from driver to pickup
  pickupDistance  Float?
  pickupDuration  Int?         // in minutes

  // Payment related
  baseAmount      Float
  taxAmount       Float
  totalAmount     Float
  advanceAmount   Float        // 25% of total
  remainingAmount Float        // 75% of total
  commission      Float    @default(0)   // 12% of total

  // Payment tracking
  advancePaymentId      String?
  finalPaymentId        String?
  finalPaymentMode      PaymentMode? @default(CASH)
  advancePaymentStatus  TransactionStatus @default(PENDING)
  finalPaymentStatus    TransactionStatus @default(PENDING)

  status          LongDistanceBookingStatus @default(PENDING)
  otp             String?

  // For outstation specific
  tripType        OutstationTripType? @default(ONE_WAY)
  paymentMode      PaymentMode    @default(CASH)
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  driverAcceptedAt  DateTime?
  advancePaidAt     DateTime?
  driverArrivedAt   DateTime?
  rideStartedAt     DateTime?
  rideEndedAt       DateTime?
  cancelledAt       DateTime?
  cancelledBy       CancelledBy?

  // Relations
  user            User          @relation("UserLongDistanceBookings", fields: [userId], references: [id])
  driver          User?         @relation("DriverLongDistanceBookings", fields: [driverId], references: [id])
  transactions    LongDistanceTransaction[]

  // Metadata
  notes           String?
  cancelReason    String?
  metadata        Json?
}

// New transaction model for long distance bookings
model LongDistanceTransaction {
  id                String            @id @default(uuid())
  bookingId         String
  amount            Float
  currency          String            @default("INR")
  type             LongDistanceTransactionType
  status           TransactionStatus  @default(PENDING)
  senderId         String?
  receiverId       String?
  razorpayOrderId  String?           @unique
  razorpayPaymentId String?

  description      String?
  metadata         Json?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  booking          LongDistanceBooking @relation(fields: [bookingId], references: [id])
  sender           User?       @relation("SenderLongDistanceTransactions", fields: [senderId], references: [id])
  receiver         User?       @relation("ReceiverLongDistanceTransactions", fields: [receiverId], references: [id])
}

enum LongDistanceTransactionType {
  BOOKING_ADVANCE
  BOOKING_FINAL
  REFUND
  CANCELLATION_FEE
}

// Add new models for vendor bookings
model VendorBooking {
  id              String                  @id @default(uuid())
  vendorId        String
  driverId        String?
  serviceType     LongDistanceServiceType
  pickupLocation  String
  pickupLat       Float?
  pickupLng       Float?
  dropLocation    String
  dropLat         Float?
  dropLng         Float?
  vehicleCategory String
  distance        Float?
  duration        Int?
  startDate       DateTime
  endDate         DateTime
  pickupTime      String
  totalDays       Int

  // Pricing
  appBasePrice    Float    // Our app's base price
  vendorPrice     Float    // Vendor's total price
  vendorCommission Float   // Vendor's commission (vendorPrice - appBasePrice)
  appCommission   Float    // Our commission (12% of appBasePrice + 10% of vendorCommission)
  driverPayout    Float    // Amount to be paid to driver
  vendorPayout    Float    // Amount to be paid to vendor

  // Payment tracking
  driverCommissionPaid Boolean @default(false)
  vendorPaidAt         DateTime?

  status          VendorBookingStatus @default(PENDING)
  notes           String?

  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  driverAcceptedAt  DateTime?
  rideStartedAt     DateTime?
  rideEndedAt       DateTime?
  cancelledAt       DateTime?
  cancelledBy       CancelledBy?
  cancelReason      String?

  // Add these fields
  otp              String?
  driverArrivedAt  DateTime?
  metadata         Json?    // Add this field for storing Chardham Yatra specific data

  // Relations
  vendor           User     @relation("VendorBookings", fields: [vendorId], references: [id])
  driver           User?    @relation("DriverVendorBookings", fields: [driverId], references: [id])
  transactions     VendorBookingTransaction[]

  tripType        OutstationTripType?

  @@map("vendor_bookings")
}

model VendorBookingTransaction {
  id                String    @id @default(uuid())
  bookingId         String
  amount            Float
  type              VendorBookingTransactionType
  status            TransactionStatus @default(PENDING)
  senderId          String
  receiverId        String
  description       String?
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  booking           VendorBooking @relation(fields: [bookingId], references: [id])
  sender            User    @relation("SentVendorTransactions", fields: [senderId], references: [id])
  receiver          User    @relation("ReceivedVendorTransactions", fields: [receiverId], references: [id])

  @@map("vendor_booking_transactions")
}

enum VendorBookingStatus {
  PENDING
  DRIVER_ACCEPTED
  DRIVER_PICKUP_STARTED
  DRIVER_ARRIVED
  STARTED
  COMPLETED
  CANCELLED
}


enum VendorBookingTransactionType {
  DRIVER_COMMISSION
  VENDOR_PAYOUT
  APP_COMMISSION
  DRIVER_PAYOUT

}

model ChatMessage {
  id        String   @id @default(uuid())
  rideId    String
  senderId  String
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  ride    Ride     @relation(fields: [rideId], references: [id])
  sender  User     @relation("SentMessages", fields: [senderId], references: [id])

  @@index([rideId])
}

model RideLocationLog {
  id          String   @id @default(uuid())
  rideId      String
  latitude    Float
  longitude   Float
  speed       Float?
  heading     Float?
  timestamp   DateTime @default(now())
  odometer    Float?   // Current odometer reading

  ride        Ride     @relation(fields: [rideId], references: [id])
  @@index([rideId, timestamp])
}
